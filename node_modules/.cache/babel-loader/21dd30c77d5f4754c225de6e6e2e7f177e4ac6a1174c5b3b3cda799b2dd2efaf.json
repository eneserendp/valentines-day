{"ast":null,"code":"import _objectSpread from \"C:/Users/enes_/Desktop/validate/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/enes_/Desktop/validate/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"transition\", \"transitionEnd\"];\nimport { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\nfunction animateVisualElement(visualElement, definition) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  visualElement.notify(\"AnimationStart\", definition);\n  let animation;\n  if (Array.isArray(definition)) {\n    const animations = definition.map(variant => animateVariant(visualElement, variant, options));\n    animation = Promise.all(animations);\n  } else if (typeof definition === \"string\") {\n    animation = animateVariant(visualElement, definition, options);\n  } else {\n    const resolvedDefinition = typeof definition === \"function\" ? resolveVariant(visualElement, definition, options.custom) : definition;\n    animation = animateTarget(visualElement, resolvedDefinition, options);\n  }\n  return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const resolved = resolveVariant(visualElement, variant, options.custom);\n  let {\n    transition = visualElement.getDefaultTransition() || {}\n  } = resolved || {};\n  if (options.transitionOverride) {\n    transition = options.transitionOverride;\n  }\n  /**\n   * If we have a variant, create a callback that runs it as an animation.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getAnimation = resolved ? () => animateTarget(visualElement, resolved, options) : () => Promise.resolve();\n  /**\n   * If we have children, create a callback that runs all their animations.\n   * Otherwise, we resolve a Promise immediately for a composable no-op.\n   */\n  const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? function () {\n    let forwardDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const {\n      delayChildren = 0,\n      staggerChildren,\n      staggerDirection\n    } = transition;\n    return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n  } : () => Promise.resolve();\n  /**\n   * If the transition explicitly defines a \"when\" option, we need to resolve either\n   * this animation or all children animations before playing the other.\n   */\n  const {\n    when\n  } = transition;\n  if (when) {\n    const [first, last] = when === \"beforeChildren\" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];\n    return first().then(last);\n  } else {\n    return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n  }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let _visualElement$makeTa = visualElement.makeTargetAnimatable(definition),\n    {\n      transition = visualElement.getDefaultTransition(),\n      transitionEnd\n    } = _visualElement$makeTa,\n    target = _objectWithoutProperties(_visualElement$makeTa, _excluded);\n  const willChange = visualElement.getValue(\"willChange\");\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n  for (const key in target) {\n    const value = visualElement.getValue(key);\n    const valueTarget = target[key];\n    if (!value || valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n    const valueTransition = _objectSpread({\n      delay,\n      elapsed: 0\n    }, transition);\n    /**\n     * If this is the first time a value is being animated, check\n     * to see if we're handling off from an existing animation.\n     */\n    if (window.HandoffAppearAnimations && !value.hasAnimated) {\n      const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n      if (appearId) {\n        valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n      }\n    }\n    let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? {\n      type: false\n    } : valueTransition));\n    if (isWillChangeMotionValue(willChange)) {\n      willChange.add(key);\n      animation = animation.then(() => willChange.remove(key));\n    }\n    animations.push(animation);\n  }\n  return Promise.all(animations).then(() => {\n    transitionEnd && setTarget(visualElement, transitionEnd);\n  });\n}\nfunction animateChildren(visualElement, variant) {\n  let delayChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let staggerChildren = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let staggerDirection = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let options = arguments.length > 5 ? arguments[5] : undefined;\n  const animations = [];\n  const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n  const generateStaggerDuration = staggerDirection === 1 ? function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return i * staggerChildren;\n  } : function () {\n    let i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return maxStaggerDuration - i * staggerChildren;\n  };\n  Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {\n    child.notify(\"AnimationStart\", variant);\n    animations.push(animateVariant(child, variant, _objectSpread(_objectSpread({}, options), {}, {\n      delay: delayChildren + generateStaggerDuration(i)\n    })).then(() => child.notify(\"AnimationComplete\", variant)));\n  });\n  return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n  visualElement.values.forEach(value => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n  return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };","map":{"version":3,"names":["setTarget","resolveVariant","transformProps","isWillChangeMotionValue","optimizedAppearDataAttribute","createMotionValueAnimation","sync","animateVisualElement","visualElement","definition","options","arguments","length","undefined","notify","animation","Array","isArray","animations","map","variant","animateVariant","Promise","all","resolvedDefinition","custom","animateTarget","then","resolved","transition","getDefaultTransition","transitionOverride","getAnimation","resolve","getChildAnimations","variantChildren","size","forwardDelay","delayChildren","staggerChildren","staggerDirection","animateChildren","when","first","last","delay","type","_visualElement$makeTa","makeTargetAnimatable","transitionEnd","target","_objectWithoutProperties","_excluded","willChange","getValue","animationTypeState","animationState","getState","key","value","valueTarget","shouldBlockAnimation","valueTransition","_objectSpread","elapsed","window","HandoffAppearAnimations","hasAnimated","appearId","getProps","start","shouldReduceMotion","has","add","remove","push","maxStaggerDuration","generateStaggerDuration","i","from","sort","sortByTreeOrder","forEach","child","stopAnimation","values","stop","a","b","sortNodePosition","_ref","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty"],"sources":["C:/Users/enes_/Desktop/validate/node_modules/framer-motion/dist/es/render/utils/animation.mjs"],"sourcesContent":["import { setTarget } from './setters.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { createMotionValueAnimation } from '../../animation/index.mjs';\nimport { sync } from '../../frameloop/index.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = animateTarget(visualElement, resolvedDefinition, options);\n    }\n    return animation.then(() => visualElement.notify(\"AnimationComplete\", definition));\n}\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.custom);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => animateTarget(visualElement, resolved, options)\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(last);\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\n/**\n * @internal\n */\nfunction animateTarget(visualElement, definition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = visualElement.makeTargetAnimatable(definition);\n    const willChange = visualElement.getValue(\"willChange\");\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key);\n        const valueTarget = target[key];\n        if (!value ||\n            valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = { delay, elapsed: 0, ...transition };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        if (window.HandoffAppearAnimations && !value.hasAnimated) {\n            const appearId = visualElement.getProps()[optimizedAppearDataAttribute];\n            if (appearId) {\n                valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);\n            }\n        }\n        let animation = value.start(createMotionValueAnimation(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition));\n        if (isWillChangeMotionValue(willChange)) {\n            willChange.add(key);\n            animation = animation.then(() => willChange.remove(key));\n        }\n        animations.push(animation);\n    }\n    return Promise.all(animations).then(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n    });\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\n\nexport { animateVisualElement, sortByTreeOrder, stopAnimation };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}